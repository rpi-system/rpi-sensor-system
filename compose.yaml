version: '3.7'
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: python-app
    environment:
      - DATABASE_URL=''
    ports:
      - "80:80"
    networks: 
      - some_network
      
  influxdb2:
    image: influxdb:latest
    ports:
      - 8086:8086
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME_FILE: /run/secrets/influxdb2-admin-username
      DOCKER_INFLUXDB_INIT_PASSWORD_FILE: /run/secrets/influxdb2-admin-password 
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN_FILE: /run/secrets/influxdb2-admin-token
      DOCKER_INFLUXDB_INIT_ORG: docs 
      DOCKER_INFLUXDB_INIT_BUCKET: home
    secrets:
      - influxdb2-admin-username
      - influxdb2-admin-password
      - influxdb2-admin-token
    volumes:
      - type: volume
        source: influxdb2-data
        target: /var/lib/influxdb2
      - type: volume
        source: influxdb2-config
        target: /etc/influxdb2
    networks: 
      - some_network

  portainer4stack:
    container_name: portainer4stack
    restart: always
    image: 'portainer/portainer-ce:latest'
    ports:
      - '9000:9000'
      - '9443:9443' #ssl
      - '8000:8000'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    command:
      - '--admin-password-file=/run/secrets/portainer_admin_password'
      - '--no-analytics'
    secrets:
      - portainer_admin_password
    networks:
      - some_network

secrets:
  influxdb2-admin-username:
    file: ./.env.influxdb2-admin-username
  influxdb2-admin-password:
    file: ./.env.influxdb2-admin-password
  influxdb2-admin-token:
    file: ./.env.influxdb2-admin-token
  portainer_admin_password:
    file: ./.env.portainer-admin-passwort

networks:
  some_network:
    driver: bridge

volumes:
  influxdb2-data:
  influxdb2-config:
  portainer-data:
    driver: local


# version: '3.6'
# services:
#   influxdb:
#     image: influxdb:2.5.1-alpine
#     container_name: influxdb
#     restart: unless-stopped
#     networks:
#       - monitoring
#     ports:
#       - '8086:8086'
#     volumes:
#       - influxdb_data:/var/lib/influxdb2
#       - influxdb_config:/etc/influxdb2
#     environment:
#       - DOCKER_INFLUXDB_INIT_MODE=setup
#       - DOCKER_INFLUXDB_INIT_USERNAME=${influxadmin}
#       - DOCKER_INFLUXDB_INIT_PASSWORD=${influxadminpass}
#       - DOCKER_INFLUXDB_INIT_ORG=first-${influxorg}
#       - DOCKER_INFLUXDB_INIT_BUCKET=${influxbucket}
#     healthcheck:
#       test: "curl -f http://localhost:8086/ping"
#       interval: 5s
#       timeout: 10s
#       retries: 5
      
# networks:
#   monitoring:
 
# volumes:
#   influxdb_data:
#   influxdb_config:


# version: '3.6'
# services:
#    grafana:
#     image: grafana/grafana
#     container_name: grafana
#     restart: unless-stopped
#     networks:
#       - monitoring
#     environment:
#       - GF_SECURITY_ADMIN_USER=${grafana_admin}
#       - GF_SECURITY_ADMIN_PASSWORD=${grafana_password}  #change the password
#       - GF_INSTALL_PLUGINS=
#     ports:
#       - '3000:3000'
#     volumes:
#       - grafana_data:/var/lib/grafana
      
# networks:
#   monitoring:
 
# volumes:
#   grafana_data:

# version: '3.6'
# services:
#    grafana:
#     image: grafana/grafana
#     container_name: grafana
#     restart: unless-stopped
#     networks:
#       - monitoring
#     environment:
#       - GF_SECURITY_ADMIN_USER=${grafana_admin}
#       - GF_SECURITY_ADMIN_PASSWORD=${grafana_password}  #change the password
#       - GF_INSTALL_PLUGINS=
#     ports:
#       - '3000:3000'
#     volumes:
#       - grafana_data:/var/lib/grafana
      
# networks:
#   monitoring:
 
# volumes:
#   grafana_data:
